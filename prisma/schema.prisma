// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- User and Auth ---

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  email           String?  @unique
  firstName       String?
  lastName        String?
  mobile          String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  ownedTeams      Team[]     @relation("TeamOwner")
  memberships     TeamMembership[]
  createdInvitations TeamInvitation[] @relation("InvitationCreator")
  
  activeOkrCycle  ActiveOkrCycle?
  calendarSettings CalendarSettings?

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- OKR System ---

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  owner     User     @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members   Member[]
  memberships TeamMembership[]
  objectives Objective[]
  invitations TeamInvitation[]
}

model Member {
  id        Int      @id @default(autoincrement())
  name      String
  avatarUrl String?
  teamId    Int
  
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  keyResultAssignments KeyResultAssignee[]
}

enum Role {
  admin
  member
}

model TeamMembership {
  teamId  Int
  userId  Int
  role    Role     @default(member)
  
  team    Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
}

model TeamInvitation {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  teamId    Int
  creatorId Int
  createdAt DateTime @default(now())
  
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creator   User     @relation("InvitationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
}


model OkrCycle {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  ownerId   Int

  objectives    Objective[]
  activeCycles  ActiveOkrCycle[]

  @@index([ownerId])
}

model Objective {
  id          Int      @id @default(autoincrement())
  description String
  teamId      Int
  cycleId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  cycle       OkrCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  keyResults  KeyResult[]
}

model KeyResult {
  id              Int      @id @default(autoincrement())
  description     String
  objectiveId     Int
  progress        Int      @default(0)
  confidenceLevel String
  
  objective       Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  initiatives     Initiative[]
  risks           Risk[]
  assignees       KeyResultAssignee[]
}

model KeyResultAssignee {
  keyResultId Int
  memberId    Int

  keyResult   KeyResult @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([keyResultId, memberId])
}

model Initiative {
  id          Int      @id @default(autoincrement())
  description String
  keyResultId Int
  status      String   // e.g., 'NOT_STARTED', 'IN_PROGRESS', 'COMPLETED'
  
  keyResult   KeyResult @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id           Int      @id @default(autoincrement())
  description  String
  completed    Boolean  @default(false)
  initiativeId Int
  
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
}

model Risk {
  id               Int      @id @default(autoincrement())
  description      String
  correctiveAction String
  status           String   // e.g., 'ACTIVE', 'RESOLVED'
  keyResultId      Int
  
  keyResult        KeyResult @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
}


// --- User Settings and Preferences ---

model ActiveOkrCycle {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  cycleId Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle   OkrCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
}

model CalendarSettings {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  frequency         String
  checkInDayOfWeek  Int
  evaluationDate    DateTime?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

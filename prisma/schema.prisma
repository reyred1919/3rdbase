generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  username           String            @unique
  email              String?           @unique
  firstName          String?
  lastName           String?
  mobile             String?
  hashedPassword     String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  is_active          Boolean           @default(false)
  activeOkrCycle     ActiveOkrCycle?
  calendarSettings   CalendarSettings?
  members            Member[]
  ownedTeams         Team[]            @relation("TeamOwner")
  createdInvitations TeamInvitation[]  @relation("InvitationCreator")
  memberships        TeamMembership[]
}

model Team {
  id          Int              @id @default(autoincrement())
  name        String
  ownerId     Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     Member[]
  objectives  Objective[]
  owner       User             @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations TeamInvitation[]
  memberships TeamMembership[]
}

model TeamMembership {
  id        Int      @id @default(autoincrement())
  userId    Int
  teamId    Int
  role      Role     @default(member)
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Member {
  id                   Int                 @id @default(autoincrement())
  teamId               Int
  name                 String
  avatarUrl            String?
  createdAt            DateTime            @default(now())
  userId               Int
  keyResultAssignments KeyResultAssignee[]
  team                 Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamInvitation {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  teamId    Int
  creatorId Int
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  creator   User      @relation("InvitationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model OkrCycle {
  id             Int              @id @default(autoincrement())
  name           String
  startDate      DateTime
  endDate        DateTime
  ownerId        Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  activeForUsers ActiveOkrCycle[]
  objectives     Objective[]
}

model ActiveOkrCycle {
  userId  Int      @unique
  cycleId Int
  cycle   OkrCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Objective {
  id          Int         @id @default(autoincrement())
  description String
  teamId      Int
  cycleId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  keyResults  KeyResult[]
  cycle       OkrCycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model KeyResult {
  id              Int                 @id @default(autoincrement())
  objectiveId     Int
  description     String
  progress        Int                 @default(0)
  confidenceLevel ConfidenceLevel     @default(MEDIUM)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  initiatives     Initiative[]
  objective       Objective           @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  assignees       KeyResultAssignee[]
  risks           Risk[]
}

model KeyResultAssignee {
  keyResultId Int
  memberId    Int
  keyResult   KeyResult @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([keyResultId, memberId])
}

model Initiative {
  id          Int              @id @default(autoincrement())
  keyResultId Int
  description String
  status      InitiativeStatus @default(NOT_STARTED)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  keyResult   KeyResult        @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id           Int        @id @default(autoincrement())
  initiativeId Int
  description  String
  completed    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
}

model Risk {
  id               Int        @id @default(autoincrement())
  keyResultId      Int
  description      String
  correctiveAction String
  status           RiskStatus @default(ACTIVE)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  keyResult        KeyResult  @relation(fields: [keyResultId], references: [id], onDelete: Cascade)
}

model CalendarSettings {
  userId           Int       @unique
  frequency        String
  checkInDayOfWeek Int
  evaluationDate   DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  admin
  member
  viewer
}

enum ConfidenceLevel {
  HIGH
  MEDIUM
  LOW
  AT_RISK
}

enum InitiativeStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum RiskStatus {
  ACTIVE
  UNDER_REVIEW
  RESOLVED
}
